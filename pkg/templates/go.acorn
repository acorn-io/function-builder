let baseImage: "golang:1.21"
let runtimeImage: "cgr.dev/chainguard/wolfi-base"

args: {
	buildPackages: [string] || default ["."]
}

localFiles: {
	".dockerignore": """
tmp/
"""
	"go.mod": """
module local

go 1.21.5
"""
}

detect: [{
	files: ["go.mod"]
	priority: 100
}, {
	files: ["*.go"]
	priority: 50
}]

targets: dev: {
	from: baseImage
	cacheVolumes: [
		"/root/.cache/go-build",
		"/go/pkg/mod",
	]
	acornfile: """
		dirs: {
			"/root/.cache/go-build": "volume://go-cache-\\(serviceName)?subPath=go-build"
			"/go/pkg/mod": "volume://go-cache-\\(serviceName)?subPath=mod"
			"/src": "./\\(build.context)"
		}
		build: watchFiles: [
			"\\(build.context)/go.mod",
			"\\(build.context)/go.sum",
			"\\(build.context)/vendor/modules.txt",
		]
	"""

	entrypoint: ["go", "run", "github.com/ibuildthecloud/conair@d6bf8ba"]
	run: [
		{copy: dest: "/src"},
	]
}

targets: build: {
	from: baseImage
	cacheVolumes: [
		"/root/.cache/go-build",
		"/go/pkg/mod",
	]
	run: [
		{copy: dest: "/src"},
		"""
        set -x -e
        if [ ! -d vendor ]; then
            go mod tidy
        fi
        go build -o /out/main \(std.join(args.buildPackages, " "))
        """,
	]
}

targets: default: {
	from:       runtimeImage
	workdir:    "/tmp"
	entrypoint: "main"
	run: [
		{
			copy: {
				from:   "build"
				source: "/out/main"
				dest:   "/bin/"
			}
		},
	]
}
